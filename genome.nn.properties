# nn:
# Every gene encodes one explicit connection in a neural network
# with three layers:
# sensor layer:  the values the robot can obtain at a given time
#                (reduced to a value between -1.0 .. 1.0)
#                e.g.: current x-axis value relative to the
#                total width of the battlefield.
# hidden layer:  sums up its inputs with the function
#                tanh(sum(inputs)) which results in
#                a value between -1.0 .. 1.0
# action layer:  sums up its inputs analogous to the hidden layer
#                and forwards it to an explicit output.
# The gene encodes input (src) and output (sink) of the connection
# as well as its weight. Every aspect of this gets generated randomly,
# so it is totally possibily for neurons in the hidden layer to be
# connected to each other or to itself.

# However, connections that have no input or never lead to an output
# will not be generated to prevent them from being calculated each
# and every turn of a game.

# Every connection comes with a default weight of -32.768 .. 32.767,
# and as this is too much, we reduce the weight by a fixed divisor.
# E.g.:
#    8.192 -> -4.0..4.0
#   16.384 -> -2.0..2.0
#   32.768 -> -1.0..1.0
evo.genome.nn.weightFlattener=32768
# Number of hidden neurons in the hidden layer.
evo.genome.nn.hiddenNeurons=16
# All possible sensors for the robot. Note that most of them are tied
# to specific robot event handlers and will therefore only be fired when
# that event handler is called.
# That said the first four lines of sensors should speak for themselves.
# The 5th line ('distanceRemaining, ...') are sensors that sense the
# movement of robot, gun or radar that has to be completed until the
# next action can be placed.
# The 6th line are one kind of RNN cell sensors. Every time the robot
# performs an action the explicit value of that action (movement distance,
# turning degree, firepower) is fed back into a loop that gets sensed by
# theese. They provide a constant stream of inputs reflecting the actions,
# because every turn the robot does not perform any kind of action a plain
# '0' is fed into the loop.
evo.genome.nn.allowedSensors=\
positionX, positionY, otherPlayers, round, turn, heading, radarHeading, gunHeading, gunHeat, velocity, energy,\
myBulletHeading, myBulletPower, myBulletVelocity, myBulletX, myBulletY,\
enemyBulletHeading, enemyBulletPower, enemyBulletVelocity, enemyBulletX, enemyBulletY,\
enemyEnergy, enemyBearing, enemyHeading, enemyDistance, enemyBulletBearing, wallBearing,\
distanceRemaining, turnRemaining, gunTurnRemaining, radarTurnRemaining,\
moveFeedback, turnFeedback, turnGunFeedback, turnRadarFeedback, fireFeedback
# All possible actions the robot can perform. The upper line should be self
# explaining: this are the standard actions a Robot or AdvancedRobot can perform.
# For the second line please consider reading 'evo.genome.nn.maxTurnAwareness'.
evo.genome.nn.allowedActors=\
ahead, back, fire, turnLeft, turnRight, turnGunLeft, turnGunRight, turnRadarLeft, turnRadarRight,\
raiseTurnAwareness, reduceTurnAwareness
# Defines the maximum distance value that can be fed into the actions
# ahead(d) and back(d).
evo.genome.nn.action.move.min=0
evo.genome.nn.action.move.max=50
# Defines the maximum degree value that can be fed into the actions
# turnLeft(d), turnRight(d), turnGunLeft(d), turnGunRight(d),
# turnRadarLeft(d) and turnRadarRight(d)
# Note that the overall maximum is 359 degrees.
evo.genome.nn.action.turn.min=0
evo.genome.nn.action.turn.max=44
# Defines the maximum firepower for the action fire(p).
# Note that this values must lay between 0.1 .. 3.0 defined by battle rules.
evo.genome.nn.action.fire.min=0.1
evo.genome.nn.action.fire.max=3.0
# Note that robocode uses the terms turn for one tick of the calculation
# of the game. The sensor 'turn' retrieves the current value of this property.
# Every other sensor can easily be flattened to -1.0 .. 1.0 because there are
# absolute limits for them - except for the 'turn'. So we divide that value by
# 'maxTurnAwareness' (and limit it by '1').
# Resulting, the sensor 'turn' retrieves a constantly raising value until
# the maximum turn is reached and it resolves to 1, which represents some
# kind of level of high alert.
evo.genome.nn.maxTurnAwareness=10000
# Advanced parameter: allows you to define a custom template that
# will be filled with the generated code.
# See src/main/resources/nn.advanced.template for an impression.
evo.genome.nn.robot.template=advanced
# Add boilerplate code to any of the robot event handlers.
# The first method defines the number of lines, the following
# define the content of each line.
evo.genome.nn.scannedRobot.boilerplate=3
evo.genome.nn.scannedRobot.boilerplate.1=if(true) {
evo.genome.nn.scannedRobot.boilerplate.2=    fire(1.0d);
evo.genome.nn.scannedRobot.boilerplate.3=}
