#####################################
## Project                         ##
#####################################

# Name of your project. This has no effect whatsover on anything
# so it is only for your convenience and can easily be left out.
evo.project.name=Evocode Project
# Location of robocode on your computer. Defaults:
# Windows: C:/robocode
# Linux:   /robocode
evo.project.robocodeLocation=C:/robocode
# Name of the Java package to be generated. This will be the package
# structure in your generated Java file and will affect to location
# under which your robot will be compiled under /robocode/robots
# when it is ran.
evo.project.packageName=de.algoristic.evocode
# Class name of the Java class file to be generated. Consider Java
# file nomenclature. Can contain the variables:
# [generation]: number of the current generation, starting with 0
# [individual]: number of the generated individual, starting with 0
evo.project.robotClassName=EvocodeBot
# Prefix of the directory created for every generation.
evo.project.generationDirectoryPrefix=generation_
# Prefix of the directory created for every individual inside the
# generation directory. (Please note that the individual directory
# is only temporary for compiling.)
evo.project.individualDirectoryPrefix=tmp.individual_

#####################################
## Running the app                 ##
#####################################

# Determines of an evolution.log file will be generated for your project.
evo.run.writeLog=true|false
# Determines the termination condition for the current run of your project.
evo.run.termination=iterations|timer|convergence
# Stop the run after $iteration iterations.
evo.run.iterations=$iteration
# Timeunit for your timeout. Can be anything that is found inside
# java.util.concurrent.TimeUnit. (E.g. days, hours, minuts, seconds, ...)
evo.run.timer.unit=days
# Amount of units of your chosen TimeUnit.
evo.run.timer.time=$hours
# The run stops after $convergence fitness is reached by any individual
# of the last generation.
evo.run.convergence=$convergence

#####################################
## Genome generation and structure ##
#####################################

# Setup the main method of your robot.
# Please take care of placing the `\` to determin each line at the very
# end of the line, leaving no trailing whitespaces.
evo.genome.mainMethod=\
while(true) {\
turnGunRight(10.0d);\
}
# The amount of genes in your genome. What this means is determined by
# the structure of your genome.
evo.genome.genes=24
# For LinearGP.dna, see `genome.dna.properties`.
# For LinearGP.nn, see `genome.nn.properties`
evo.genome.structure=LinearGP.nn|LinearGP.dna

#####################################
## Island setup                    ##
#####################################

# The total amount of individuals of a generation will be equally
# distributed over the defined number of islands. The islands stay
# isolated from each other unless a migration happens. This leads
# to a partition of the search space and can produce a number of
# totally different apporaches to the solution.
evo.strategy.islands.num=1
# There are two types of migration:
# random: Let's individuals more or less uncrolled jump between
#         islands (just as the name states).
# ring:   The ring migration leads to a more controlled behaviour,
#         where the migration individuals travel to the next
#         adjascent island.
# For the '0' in this (evo.gen.'0'.islands...) see the next part.
evo.gen.0.islands.migration=ring, random
# Each migration is defined by an epoch (the amount of generations
# until the next migration happens). So a migration happens if
# `generation % epoch == 0`.
evo.gen.0.islands.migration.ring.epoch=10
evo.gen.0.islands.migration.random.epoch=10
# Each migration is also defined by a percentual chance for an
# individual to actually migrate. Please note, that this chance
# will be applied for every defined migration type on its own.
# This means, when rang and random both are defined with a 1% chance,
# of 100 individuals there will most likely be 2 that will be migrated.
evo.gen.0.islands.migration.ring.chance=0.01
evo.gen.0.islands.migration.random.chance=0.01

#####################################
## Evolution control               ##
#####################################

# Preface:
# Evolution control, as well as migration control for the islands,
# is designed to be set generation specific, denoted by the number
# after 'evo.gen.'. The parameters are set by the highlander principle,
# so the highest number, that applies to your generation will be used.

# It is good practice to start defining everything for generation 0
# in the first place and then start making generation specific changes.
# This highly increases the readability and traceability of parameter
# changes throughout the project.

# Please note that the .properties will be re-read anytime before a
# new generation is generated, so there is no need to override your
# settings, that already produced a generation.

# Parameters:
# Determines the size of any generated generation. This number of
# indivduals will be spread equally over the defined number of islands.
evo.gen.0.generation.size=100
# The fitness function will be applied to rate every indivil's
# performance. So, designing a fitness function that fits your needs
# is a key step for your evolution to succeed.
# Possible variables:
#             [score]: The score your individual reached in the evaluation
#        [percentage]: Your score / total score
#              [rank]: Overall rank of your individual in the evaluation.
#                      (Thanks to robocode API this is always 1)
# 
# [lastSurvivorBonus]:
#          [survival]:
#      [bulletDamage]:
# [bulletDamageBonus]:
#         [ramDamage]:
#    [ramDamageBonus]:
#            [firsts]:
#           [seconds]:
#            [thirds]:
# Please note that the fitness function will produce an integer value.
evo.gen.0.fitnessFunction=([percentage] * 100)
evo.gen.0.enemies=sample.Corners
evo.gen.0.battlefield.width=1000
evo.gen.0.battlefield.height=1000
evo.gen.0.battleRounds=35

evo.gen.0.selectors=elite, rank
evo.gen.0.selector.elite.out=12
evo.gen.0.selector.rank.out=116

evo.gen.0.mutators=point
evo.gen.0.mutator.point.mutationRate=.01
